import time
import gradio as gr
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from collections import defaultdict

# LLM + storage
from agent import plan_day, nudge, reflect
from storage import (
    ensure_data_files, add_tasks, get_tasks,
    add_habit, list_habits, toggle_habit,
    add_session, list_sessions,
    add_reflection, list_reflections,
)

# Voice transcription (uses OPENAI_API_KEY as a Space secret)
from openai import OpenAI

ensure_data_files()

#  SETTINGS / MODES 

MODE_PRESETS = {
    "Speed (cheap/fast)":   {"model": "gpt-4o-mini", "temperature": 0.2},
    "Balanced":             {"model": "gpt-4o-mini", "temperature": 0.4},
    "Insight (richer)":     {"model": "gpt-4.1-mini", "temperature": 0.3},
}

#  HELPERS

def _mk_schedule_md(plan: dict) -> str:
    blocks = plan.get("schedule_blocks", [])
    if not blocks:
        return "\n_No schedule blocks generated._\n"
    lines = ["###  Suggested Focus Blocks"]
    for b in blocks:
        label = b.get("label", "Block")
        dur = b.get("duration_min", 25)
        tasks = ", ".join(b.get("task_ids", [])) or "(choose any high-priority task)"
        lines.append(f"- **{label}** — {dur} min · tasks: {tasks}")
    return "\n".join(lines)

def _table_from_tasks(tasks):
    headers = ["id", "task", "estimate_min", "priority"]
    rows = [[t.get("id"), t.get("text"), t.get("estimate_min"), t.get("priority")] for t in tasks]
    return headers, rows

def _stats_kpis_md():
    sessions = list_sessions()
    total_min = sum(s.get("minutes", 0) for s in sessions)
    habits = list_habits()
    reflections = list_reflections()
    kpi = (
        f"###  Today’s Snapshot\n"
        f"- **Focus minutes logged:** {total_min}\n"
        f"- **Habits tracked:** {len(habits)}\n"
        f"- **Reflections logged:** {len(reflections)}"
    )
    return kpi

def _daily_minutes_plot():
    sessions = list_sessions()
    if not sessions:
        return None
    per_day = defaultdict(int)
    for s in sessions:
        ts = s.get("ts", "")[:10]
        if ts:
            per_day[ts] += int(s.get("minutes", 0))
    xs = sorted(per_day.keys())
    ys = [per_day[d] for d in xs]

    fig, ax = plt.subplots()
    ax.plot(xs, ys, marker="o")
    ax.set_xlabel("Date")
    ax.set_ylabel("Focus minutes")
    ax.set_title("Focus Minutes by Day")
    ax.grid(True, linestyle=":", linewidth=0.5)
    fig.tight_layout()
    return fig

def _weekly_report_markdown() -> str:
    sessions = list_sessions()
    habits = list_habits()
    reflections = list_reflections()

    by_day = {}
    for s in sessions:
        d = s.get("ts","")[:10]
        by_day[d] = by_day.get(d, 0) + int(s.get("minutes", 0))

    lines = ["# Weekly Productivity Report\n"]

    lines.append("## Focus Minutes by Day")
    if not by_day:
        lines.append("- No focus sessions logged yet.")
    else:
        for d in sorted(by_day.keys()):
            lines.append(f"- **{d}**: {by_day[d]} min")

    lines.append("\n## Habit Streaks")
    if not habits:
        lines.append("- No habits yet.")
    else:
        for h in habits:
            lines.append(f"- **{h['name']}** —  streak: {h['streak']}")

    lines.append("\n## Latest Reflections")
    if not reflections:
        lines.append("- No reflections yet.")
    else:
        for r in reflections[-5:][::-1]:
            ts = r.get("ts","")[:16].replace("T"," ")
            lines.append(f"- **{ts}** — {r.get('summary','(no summary)')}")

    lines.append("\n*Generated by Daily Productivity Coach AI*")
    return "\n".join(lines)

def _save_text_file(content: str, filename: str) -> str:
    path = f"./{filename}"
    with open(path, "w", encoding="utf-8") as f:
        f.write(content)
    return path

def _make_ics_from_blocks(blocks, day_start="09:00"):
    today = datetime.now().date()
    hour, minute = map(int, day_start.split(":"))
    start_dt = datetime(today.year, today.month, today.day, hour, minute)
    events = []
    for b in blocks:
        label = b.get("label", "Focus Block")
        dur = int(b.get("duration_min", 25))
        end_dt = start_dt + timedelta(minutes=dur)
        events.append((label, start_dt, end_dt))
        start_dt = end_dt

    def fmt(dt):
        return dt.strftime("%Y%m%dT%H%M%S")

    ics_lines = [
        "BEGIN:VCALENDAR",
        "VERSION:2.0",
        "PRODID:-//AI Productivity Coach//EN",
    ]
    now = datetime.now()
    for (label, s, e) in events:
        ics_lines += [
            "BEGIN:VEVENT",
            f"UID:{fmt(s)}-{label.replace(' ','_')}@aicoach",
            f"DTSTAMP:{fmt(now)}",
            f"DTSTART:{fmt(s)}",
            f"DTEND:{fmt(e)}",
            f"SUMMARY:{label}",
            "END:VEVENT",
        ]
    ics_lines.append("END:VCALENDAR")
    return "\n".join(ics_lines)

#  VOICE 

_openai_client = OpenAI()

def _transcribe_audio_local(file_path: str):
    """
    Transcribe mic audio file using OpenAI Whisper (whisper-1).
    Returns text or None on failure.
    """
    try:
        with open(file_path, "rb") as f:
            resp = _openai_client.audio.transcriptions.create(
                model="whisper-1",
                file=f,
                response_format="text",
                temperature=0.0,
            )
        return str(resp).strip()
    except Exception:
        return None

# CALLBACKS 

def cb_plan_with_state(goals_text: str, settings, last_plan):
    if not goals_text.strip():
        return (
            gr.update(value="> Tip: paste both work and personal tasks.\n\n- write blog intro\n- review PR #431\n- prepare 3 slides for demo\n- 30 min run"),
            gr.update(value=[]),
            gr.update(value=""),
            last_plan,
        )
    plan = plan_day(goals_text, model=settings["model"], temperature=settings["temperature"])
    tasks = plan.get("tasks", [])
    add_tasks(tasks)

    _, rows = _table_from_tasks(tasks)
    schedule_md = _mk_schedule_md(plan)
    plan_summary = (
        f"### Plan created ({len(tasks)} tasks)\n\n"
        f"**Notes:** {plan.get('notes','-')}\n\n{schedule_md}"
    )
    lp = {"schedule_blocks": plan.get("schedule_blocks", [])}
    return gr.update(value=plan_summary), gr.update(value=rows), gr.update(value=_stats_kpis_md()), lp

def cb_nudge(context: str, settings):
    j = nudge(context or "No context provided.", model=settings["model"], temperature=0.2)
    return (
        f"**Nudge:** {j.get('nudge','')}\n\n"
        f"**Micro step:** {j.get('micro_step','')}\n\n"
        f"**Reframe:** {j.get('reframe','')}"
    )

def cb_add_habit(name: str):
    add_habit((name or '').strip())
    return _render_habits()

def _render_habits():
    habits = list_habits()
    if not habits:
        return gr.update(choices=[], value=None), "_No habits yet. Add one above!_"
    names = [h["name"] for h in habits]
    badge = "\n".join([f"- **{h['name']}** ·  streak: {h['streak']}" for h in habits])
    return gr.update(choices=names, value=None), badge

def cb_mark_habit_done(name: str):
    if not name:
        return _render_habits()
    today = datetime.utcnow().date().isoformat()
    toggle_habit(name, today)
    return _render_habits()

def cb_start_session(task_text: str, minutes: int, settings):
    """
    Start a focus session: return the UI message + a start timestamp (epoch seconds).
    """
    minutes = minutes or 25
    j = nudge(f"Focus session starting for: {task_text}", model=settings["model"], temperature=0.2)
    instructions = j.get("micro_step", "Silence notifications, open only the files you need, set a 25 min timer.")
    msg = (
        f"###  Focus for **{minutes}** minutes\n"
        f"**Task:** {task_text}\n\n"
        f"**Suggested micro-step:** {instructions}\n\n"
        "> When you’re done, summarize the outcome and click **End Session**."
    )
    start_epoch = time.time()
    return msg, start_epoch

def cb_end_session(task_text: str, minutes: int, outcome: str, start_epoch):
    """
    End session: compute actual elapsed minutes if we have a start timestamp.
    Fallback to slider value if not available.
    """
    elapsed = None
    if start_epoch:
        try:
            elapsed = max(1, int(round((time.time() - float(start_epoch)) / 60.0)))
        except Exception:
            elapsed = None
    minutes_to_log = elapsed if elapsed is not None else (minutes or 25)

    sessions = add_session(task_text, minutes_to_log, outcome or "done")
    latest = sessions[-5:]
    table = [[s.get("ts","")[:16].replace('T',' '), s.get("task",""), s.get("minutes",0), s.get("outcome","-")] for s in latest]
    return f"Saved session (logged **{minutes_to_log} min**). Total sessions: **{len(sessions)}**", table, _stats_kpis_md()

def cb_reflect(whats_good: str, blockers: str, settings):
    notes = f"Good: {whats_good}\nBlockers: {blockers}"
    j = reflect(notes, model=settings["model"], temperature=settings["temperature"])
    add_reflection(j)
    md = (
        f"###  Reflection\n"
        f"**Summary:** {j.get('summary','')}\n\n"
        f"**Wins:** {', '.join(j.get('wins', []))}\n\n"
        f"**Lessons:** {', '.join(j.get('lessons', []))}\n\n"
        f"**Tomorrow — Top One:** {j.get('tomorrow_top_one','')}"
    )
    history_md = _render_reflection_history()
    return md, history_md, _stats_kpis_md()

def _render_reflection_history():
    refl = list_reflections()
    if not refl:
        return "_No reflections yet._"
    lines = ["###  Reflection History (latest)\n"]
    for r in refl[-5:][::-1]:
        ts = r.get("ts", "")[:16].replace('T',' ')
        lines.append(f"- **{ts}** — {r.get('summary','(no summary)')}")
    return "\n".join(lines)

def cb_stats_refresh():
    kpi = _stats_kpis_md()
    fig = _daily_minutes_plot()
    return kpi, fig

def cb_voice_to_plan(audio_file, settings):
    if audio_file is None:
        return "Please record something first.", [], _stats_kpis_md()
    text = _transcribe_audio_local(audio_file)
    if not text:
        return "Transcription failed. Try again.", [], _stats_kpis_md()
    plan = plan_day(text, model=settings["model"], temperature=settings["temperature"])
    tasks = plan.get("tasks", [])
    add_tasks(tasks)
    _, rows = _table_from_tasks(tasks)
    summary = (
        f"###  Transcribed Goals\n> {text}\n\n"
        f"###  Plan created ({len(tasks)} tasks)\n\n"
        f"**Notes:** {plan.get('notes','-')}\n\n{_mk_schedule_md(plan)}"
    )
    return summary, rows, _stats_kpis_md()

def cb_generate_report():
    md = _weekly_report_markdown()
    path = _save_text_file(md, "weekly_report.md")
    return md, path

def cb_export_ics(day_start, last_plan):
    blocks = (last_plan or {}).get("schedule_blocks", [])
    if not blocks:
        return "No schedule blocks available. Generate a plan first.", None
    ics = _make_ics_from_blocks(blocks, day_start=day_start or "09:00")
    path = _save_text_file(ics, "focus_blocks.ics")
    return "ICS generated. Import into your calendar app.", path

#  UI / THEME 

# Force-Dark toggle 
FORCE_DARK = True  # set to False if you want to go back to auto mode

base_css = """
/* shared styles for cards/markdown (used in both modes) */
.kpi-card {
  background: linear-gradient(180deg, #111827, #1f2937);
  border: 1px solid #374151;
  padding: 16px;
  border-radius: 14px;
}
.muted { opacity: .9; }
.gr-markdown h1, .gr-markdown h2, .gr-markdown h3 { color: #60a5fa; }
"""

force_dark_css = """
/* HARD-DARK OVERRIDES (works on HF Spaces reliably) */
html { color-scheme: dark !important; }
body, .gradio-container { background: #0b1220 !important; color: #e5e7eb !important; }
.gr-markdown, .muted, label, .gr-accordion .label, .gr-accordion .label span {
  color: #e5e7eb !important;
}
/* Inputs / textareas / dropdowns / numbers */
.gr-textbox textarea, .gr-textbox input,
.gr-number input, .gr-dropdown input, .gr-dropdown .wrap-inner,
.gr-slider input {
  background: #0f172a !important;   /* slate-900 */
  color: #e5e7eb !important;         /* gray-200 */
  border-color: #334155 !important;  /* slate-700 */
}
.gr-textbox textarea::placeholder, .gr-textbox input::placeholder {
  color: #94a3b8 !important;         /* slate-400 */
  opacity: 1 !important;
}
/* Dataframe / tables */
.gr-dataframe, .gr-dataframe table {
  background: #0b1220 !important;
  color: #e5e7eb !important;
}
.gr-dataframe th, .gr-dataframe td {
  border-color: #334155 !important;
}
"""

light_css = """
/* LIGHT fallback (only used if FORCE_DARK=False) */
html { color-scheme: light !important; }
body, .gradio-container { background: #ffffff !important; color: #111827 !important; }
.gr-markdown, .muted, label, .gr-accordion .label, .gr-accordion .label span { color: #111827 !important; }
.gr-textbox textarea, .gr-textbox input,
.gr-number input, .gr-dropdown input, .gr-dropdown .wrap-inner,
.gr-slider input {
  background: #ffffff !important;
  color: #111827 !important;
  border-color: #e5e7eb !important;
}
.gr-textbox textarea::placeholder, .gr-textbox input::placeholder {
  color: #6b7280 !important;
  opacity: 1 !important;
}
.gr-dataframe, .gr-dataframe table { background: #ffffff !important; color: #111827 !important; }
.gr-dataframe th, .gr-dataframe td { border-color: #e5e7eb !important; }
"""

css = base_css + (force_dark_css if FORCE_DARK else light_css)



with gr.Blocks(
    title="Daily Productivity Coach AI",
    theme=gr.themes.Soft(),
    css=css,
) as demo:
    # States must be inside Blocks
    settings_state = gr.State(MODE_PRESETS["Balanced"])
    last_plan_state = gr.State({"schedule_blocks": []})
    focus_start_state = gr.State(None)   # holds epoch seconds when a session starts

    gr.Markdown(
        "#  Daily Productivity Coach AI\n"
        "*Plan your day, focus deeply, track habits, reflect at night.*"
    )

    # KPI header + quick help
    with gr.Row():
        with gr.Column(scale=2):
            kpis = gr.Markdown(_stats_kpis_md(), elem_classes=["kpi-card"])
        with gr.Column(scale=1):
            with gr.Accordion("How to use (quick)", open=False):
                gr.Markdown(
                    "- **Plan:** paste today’s goals → get tasks & focus blocks.\n"
                    "- **Focus:** start a 25–50m session on one task.\n"
                    "- **Habits:** add habits and mark done to build streaks.\n"
                    "- **Reflect:** quick nightly summary → pick tomorrow’s Top One."
                )

    #  Plan 
    with gr.Tab("Plan"):
        with gr.Row():
            with gr.Column(scale=1):
                goals = gr.Textbox(
                    label="Paste today's goals/tasks (freeform)",
                    lines=10,
                    placeholder="- write blog intro\n- review PR #431\n- prepare 3 slides for demo\n- 30 min run",
                )
                plan_btn = gr.Button("✨ Generate Plan", variant="primary")
                tip = gr.Markdown(elem_classes=["muted"])
            with gr.Column(scale=1):
                plan_md = gr.Markdown()
                plan_table = gr.Dataframe(
                    headers=["id","task","estimate_min","priority"],
                    datatype=["str","str","number","str"],
                    interactive=False
                )
        plan_btn.click(
            cb_plan_with_state,
            inputs=[goals, settings_state, last_plan_state],
            outputs=[plan_md, plan_table, kpis, last_plan_state]
        )

    #  Focus
    with gr.Tab("Focus"):
        with gr.Row():
            with gr.Column(scale=1):
                task_text = gr.Textbox(label="What task will you focus on?", placeholder="e.g., Write blog introduction")
                minutes = gr.Slider(label="Focus minutes", minimum=10, maximum=60, step=5, value=25)
                start = gr.Button(" Start Focus Session", variant="primary")
                end = gr.Button(" End Session & Save")
                outcome = gr.Textbox(label="Outcome/Notes", placeholder="What did you complete? Any obstacles?")
            with gr.Column(scale=1):
                focus_md = gr.Markdown("_No session yet. Start one on the left._")
                recent_table = gr.Dataframe(headers=["time","task","min","outcome"], datatype=["str","str","number","str"], interactive=False)
        # Start now returns message + start timestamp -> store in focus_start_state
        start.click(cb_start_session, inputs=[task_text, minutes, settings_state], outputs=[focus_md, focus_start_state])
        # End uses focus_start_state to compute elapsed minutes
        end.click(cb_end_session, inputs=[task_text, minutes, outcome, focus_start_state], outputs=[focus_md, recent_table, kpis])

    #  Habits 
    with gr.Tab("Habits"):
        with gr.Row():
            with gr.Column(scale=1):
                habit_name = gr.Textbox(label="Add a habit", placeholder="e.g., 10k steps")
                add_habit_btn = gr.Button(" Add habit")
                habit_picker = gr.Dropdown(label="Mark today done", choices=[], value=None)
                mark_done_btn = gr.Button(" Mark done today")
            with gr.Column(scale=1):
                habit_md = gr.Markdown("_No habits yet. Add one on the left._")
        add_habit_btn.click(cb_add_habit, inputs=[habit_name], outputs=[habit_picker, habit_md])
        mark_done_btn.click(cb_mark_habit_done, inputs=[habit_picker], outputs=[habit_picker, habit_md])

    # Reflect 
    with gr.Tab("Reflect"):
        with gr.Row():
            with gr.Column(scale=1):
                good = gr.Textbox(label="What went well today?", lines=4)
                blockers = gr.Textbox(label="What got in the way?", lines=4)
                reflect_btn = gr.Button(" Generate reflection & save", variant="primary")
            with gr.Column(scale=1):
                reflect_md = gr.Markdown("_No reflection yet._")
                history_md = gr.Markdown("_No history yet._")
        reflect_btn.click(cb_reflect, inputs=[good, blockers, settings_state], outputs=[reflect_md, history_md, kpis])

    #  Voice 
    with gr.Tab("Voice"):
        gr.Markdown("###  Speak your goals\nRecord a quick note; we’ll transcribe and turn it into today’s plan.")
        audio = gr.Audio(sources=["microphone"], type="filepath", label="Record goals")
        voice_btn = gr.Button("Transcribe & Plan", variant="primary")
        voice_md = gr.Markdown()
        voice_table = gr.Dataframe(headers=["id","task","estimate_min","priority"], datatype=["str","str","number","str"], interactive=False)
        voice_btn.click(cb_voice_to_plan, inputs=[audio, settings_state], outputs=[voice_md, voice_table, kpis])

    #  Reports 
    with gr.Tab("Reports"):
        gr.Markdown("###  Weekly Report\nGenerates a shareable Markdown summary.")
        report_btn = gr.Button("Generate Weekly Report")
        report_md = gr.Markdown()
        report_file = gr.File(label="Download report (Markdown)", interactive=False)
        report_btn.click(cb_generate_report, outputs=[report_md, report_file])

    #  Calendar Export 
    with gr.Tab("Calendar Export"):
        gr.Markdown("###  Export Focus Blocks to Calendar (.ics)\nCreate a calendar file from the latest plan’s focus blocks.")
        start_time = gr.Textbox(label="Day start time (HH:MM, 24h)", value="09:00")
        ics_btn = gr.Button("Create ICS from Latest Plan")
        ics_status = gr.Markdown()
        ics_file = gr.File(label="Download .ics", interactive=False)
        ics_btn.click(cb_export_ics, inputs=[start_time, last_plan_state], outputs=[ics_status, ics_file])

    #  Settings 
    with gr.Tab("Settings"):
        preset = gr.Dropdown(label="Optimization Mode", choices=list(MODE_PRESETS.keys()), value="Balanced")
        preset_md = gr.Markdown()
        def on_preset_change(name):
            cfg = MODE_PRESETS[name]
            return cfg, f"**Model:** {cfg['model']} · **Temp:** {cfg['temperature']}"
        preset.change(on_preset_change, inputs=[preset], outputs=[settings_state, preset_md])

    #  Stats 
    with gr.Tab("Stats"):
        stats_btn = gr.Button(" Refresh stats")
        stats_md = gr.Markdown(_stats_kpis_md())
        stats_plot = gr.Plot()
        stats_btn.click(cb_stats_refresh, outputs=[stats_md, stats_plot])

if __name__ == "__main__":
    demo.launch()